{"ast":null,"code":"export function clickFavorite(recipeInfo, isFavoritePar, setIsFavorite, type) {\n  setIsFavorite(!isFavoritePar);\n  const {\n    idMeal,\n    strArea,\n    strCategory,\n    strMeal,\n    strMealThumb\n  } = recipeInfo;\n  const {\n    idDrink,\n    strDrink,\n    strAlcoholic,\n    strDrinkThumb\n  } = recipeInfo;\n  const mealInfo = type === 'comida' ? {\n    id: idMeal,\n    type: 'comida',\n    area: strArea,\n    category: strCategory,\n    alcoholicOrNot: '',\n    name: strMeal,\n    image: strMealThumb\n  } : {\n    id: idDrink,\n    type: 'bebida',\n    area: '',\n    category: strCategory,\n    alcoholicOrNot: strAlcoholic,\n    name: strDrink,\n    image: strDrinkThumb\n  };\n  let storage = JSON.parse(localStorage.getItem('favoriteRecipes'));\n\n  if (!storage) {\n    storage = [];\n  }\n\n  if (!isFavoritePar) {\n    const newStorage = [...storage, mealInfo];\n    localStorage.setItem('favoriteRecipes', JSON.stringify(newStorage));\n  }\n\n  if (isFavoritePar) {\n    const newStorage = storage.filter(e => !e.id === idMeal);\n    localStorage.setItem('favoriteRecipes', JSON.stringify(newStorage));\n  }\n}\nexport function copyContent(text, setShowCopyAlert) {\n  const separetedText = text.split('/');\n  const modifiedText = `${separetedText[0]}//${separetedText[2]}/${separetedText[4]}/${separetedText[5]}`;\n  navigator.clipboard.writeText(modifiedText).then(() => {\n    setShowCopyAlert(true);\n    alert(modifiedText);\n  }).catch(err => {\n    alert(err);\n  });\n}\nexport function mountRecipeList(inProgressRecipe, checked, ingredientsDoneList) {\n  const quant = Object.keys(inProgressRecipe).filter(e => e.includes('strIngredient'));\n  const ingred = Object.keys(inProgressRecipe).filter(e => e.includes('strMeasure'));\n  quant.map((e, i) => inProgressRecipe[e] !== null && inProgressRecipe[e] !== '' ? ingredientsDoneList.push({\n    meal: inProgressRecipe[e],\n    mensure: inProgressRecipe[ingred[i]],\n    checked: checked.checkbox[i]\n  }) : null);\n  return ingredientsDoneList;\n}\nexport function getIfHasBeenFavorited(idPar) {\n  const storage = JSON.parse(localStorage.getItem('favoriteRecipes'));\n\n  if (storage) {\n    const favorited = storage.find(e => e.id === idPar);\n    return favorited;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/fmartins/Trybe/fabemiliano.github.io/projetos/recipe-app/sd-03-recipes-app-04/src/components/functionsProgressScreen.js"],"names":["clickFavorite","recipeInfo","isFavoritePar","setIsFavorite","type","idMeal","strArea","strCategory","strMeal","strMealThumb","idDrink","strDrink","strAlcoholic","strDrinkThumb","mealInfo","id","area","category","alcoholicOrNot","name","image","storage","JSON","parse","localStorage","getItem","newStorage","setItem","stringify","filter","e","copyContent","text","setShowCopyAlert","separetedText","split","modifiedText","navigator","clipboard","writeText","then","alert","catch","err","mountRecipeList","inProgressRecipe","checked","ingredientsDoneList","quant","Object","keys","includes","ingred","map","i","push","meal","mensure","checkbox","getIfHasBeenFavorited","idPar","favorited","find"],"mappings":"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","sourcesContent":["export function clickFavorite(recipeInfo, isFavoritePar, setIsFavorite, type) {\n  setIsFavorite(!isFavoritePar);\n  const {\n    idMeal, strArea, strCategory, strMeal, strMealThumb,\n  } = recipeInfo;\n  const {\n    idDrink, strDrink, strAlcoholic, strDrinkThumb,\n  } = recipeInfo;\n  const mealInfo = type === 'comida'\n    ? {\n      id: idMeal,\n      type: 'comida',\n      area: strArea,\n      category: strCategory,\n      alcoholicOrNot: '',\n      name: strMeal,\n      image: strMealThumb,\n    }\n    : {\n      id: idDrink,\n      type: 'bebida',\n      area: '',\n      category: strCategory,\n      alcoholicOrNot: strAlcoholic,\n      name: strDrink,\n      image: strDrinkThumb,\n    };\n  let storage = JSON.parse(localStorage.getItem('favoriteRecipes'));\n  if (!storage) {\n    storage = [];\n  }\n  if (!isFavoritePar) {\n    const newStorage = [...storage, mealInfo];\n    localStorage.setItem('favoriteRecipes', JSON.stringify(newStorage));\n  }\n  if (isFavoritePar) {\n    const newStorage = storage.filter((e) => !e.id === idMeal);\n    localStorage.setItem('favoriteRecipes', JSON.stringify(newStorage));\n  }\n}\n\nexport function copyContent(text, setShowCopyAlert) {\n  const separetedText = text.split('/');\n  const modifiedText = `${separetedText[0]}//${separetedText[2]}/${separetedText[4]}/${separetedText[5]}`;\n  navigator.clipboard.writeText(modifiedText)\n    .then(() => {\n      setShowCopyAlert(true);\n      alert(modifiedText);\n    })\n    .catch((err) => {\n      alert(err);\n    });\n}\n\nexport function mountRecipeList(inProgressRecipe, checked, ingredientsDoneList) {\n  const quant = Object.keys(inProgressRecipe).filter((e) => e.includes('strIngredient'));\n  const ingred = Object.keys(inProgressRecipe).filter((e) => e.includes('strMeasure'));\n  quant.map((e, i) => (inProgressRecipe[e] !== null && inProgressRecipe[e] !== ''\n    ? ingredientsDoneList.push({\n      meal: inProgressRecipe[e],\n      mensure: inProgressRecipe[ingred[i]],\n      checked: checked.checkbox[i],\n    })\n    : null\n  ));\n\n  return ingredientsDoneList;\n}\n\nexport function getIfHasBeenFavorited(idPar) {\n  const storage = JSON.parse(localStorage.getItem('favoriteRecipes'));\n  if (storage) {\n    const favorited = storage.find((e) => e.id === idPar);\n    return favorited;\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"module"}