{"ast":null,"code":"var _jsxFileName = \"/Users/fmartins/Trybe/fabemiliano.github.io/projetos/recipe-app/sd-03-recipes-app-04/src/components/ProgressDrinkScreen.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getDrinkByID } from '../services/drink-api';\nimport { mountRecipeList, getIfHasBeenFavorited } from './functionsProgressScreen';\nimport checkedlist from './checklist';\nimport CockTailsRenderRecipesInProgress from './helpersComponents/CockTailsRenderRecipesInProgress';\n\nfunction ProgressDrinkScreen(props) {\n  const [inProgressDrink, setInProgressDrink] = useState([]);\n  const [showCopyAlert, setShowCopyAlert] = useState(false);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [countChecked, setCountChecked] = useState(0);\n  const ingredientsDoneList = [];\n  let checkLocalStorage = JSON.parse(localStorage.getItem('inProgressRecipes'));\n  const {\n    match: {\n      params: {\n        id\n      }\n    }\n  } = props;\n  const [checked, setChecked] = useState(checkedlist);\n  useEffect(() => {\n    getDrinkByID(id).then(data => {\n      setInProgressDrink(data.drinks[0]);\n    });\n\n    if (getIfHasBeenFavorited(id)) {\n      setIsFavorite(true);\n    }\n\n    if (checkLocalStorage === null) {\n      checkLocalStorage = {\n        cocktails: [],\n        meals: []\n      };\n    }\n\n    if (checkLocalStorage.cocktails === undefined) {\n      checkLocalStorage = { ...checkLocalStorage,\n        cocktails: []\n      };\n      localStorage.setItem('inProgressRecipes', JSON.stringify({ ...checkLocalStorage,\n        cocktails: {\n          [id]: checked.checkbox,\n          countChecked\n        }\n      }));\n    } else {\n      localStorage.setItem('inProgressRecipes', JSON.stringify([...checkLocalStorage, {\n        cocktails: {\n          [id]: checked.checkbox\n        },\n        countChecked\n      }]));\n    }\n\n    if (getIfHasBeenFavorited(id)) {\n      setIsFavorite(true);\n    }\n  }, [id, checkLocalStorage, checked, countChecked]);\n  const data = mountRecipeList(inProgressDrink, checked, ingredientsDoneList);\n  const buttonEnabled = countChecked === data.length;\n  const {\n    location,\n    history\n  } = props;\n  const {\n    pathname\n  } = location;\n  return /*#__PURE__*/React.createElement(CockTailsRenderRecipesInProgress, {\n    values: {\n      data,\n      buttonEnabled,\n      inProgressDrink,\n      showCopyAlert,\n      setShowCopyAlert,\n      checkLocalStorage,\n      isFavorite,\n      id,\n      checked,\n      setCountChecked,\n      setChecked,\n      countChecked,\n      setIsFavorite,\n      pathname,\n      history\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  });\n}\n\nProgressDrinkScreen.propTypes = {\n  match: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  history: PropTypes.string.isRequired\n};\nexport default ProgressDrinkScreen;","map":{"version":3,"sources":["/Users/fmartins/Trybe/fabemiliano.github.io/projetos/recipe-app/sd-03-recipes-app-04/src/components/ProgressDrinkScreen.jsx"],"names":["React","useEffect","useState","PropTypes","getDrinkByID","mountRecipeList","getIfHasBeenFavorited","checkedlist","CockTailsRenderRecipesInProgress","ProgressDrinkScreen","props","inProgressDrink","setInProgressDrink","showCopyAlert","setShowCopyAlert","isFavorite","setIsFavorite","countChecked","setCountChecked","ingredientsDoneList","checkLocalStorage","JSON","parse","localStorage","getItem","match","params","id","checked","setChecked","then","data","drinks","cocktails","meals","undefined","setItem","stringify","checkbox","buttonEnabled","length","location","history","pathname","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getDrinkByID } from '../services/drink-api';\nimport { mountRecipeList, getIfHasBeenFavorited } from './functionsProgressScreen';\nimport checkedlist from './checklist';\nimport CockTailsRenderRecipesInProgress from './helpersComponents/CockTailsRenderRecipesInProgress';\n\nfunction ProgressDrinkScreen(props) {\n  const [inProgressDrink, setInProgressDrink] = useState([]);\n  const [showCopyAlert, setShowCopyAlert] = useState(false);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [countChecked, setCountChecked] = useState(0);\n  const ingredientsDoneList = [];\n  let checkLocalStorage = JSON.parse(localStorage.getItem('inProgressRecipes'));\n  const { match: { params: { id } } } = props;\n\n  const [checked, setChecked] = useState(checkedlist);\n\n  useEffect(() => {\n    getDrinkByID(id).then((data) => {\n      setInProgressDrink(data.drinks[0]);\n    });\n    if (getIfHasBeenFavorited(id)) { setIsFavorite(true); }\n    if (checkLocalStorage === null) {\ncheckLocalStorage = {cocktails: [], meals: []}\n    }\n    if (checkLocalStorage.cocktails === undefined) {\n      checkLocalStorage = {...checkLocalStorage, cocktails: [] };\n      localStorage.setItem('inProgressRecipes', JSON.stringify({...checkLocalStorage, cocktails: {[id]: checked.checkbox, countChecked } }));\n    } else {\n      localStorage.setItem('inProgressRecipes', JSON.stringify([...checkLocalStorage, { cocktails: { [id]: checked.checkbox }, countChecked }]));\n    }\n    if (getIfHasBeenFavorited(id)) { setIsFavorite(true); }\n  }, [id, checkLocalStorage, checked, countChecked]);\n\n  const data = mountRecipeList(inProgressDrink, checked, ingredientsDoneList);\n  const buttonEnabled = countChecked === data.length;\n  const { location, history } = props;\n  const { pathname } = location;\n\n  return (\n    <CockTailsRenderRecipesInProgress\n      values={{\n        data,\n        buttonEnabled,\n        inProgressDrink,\n        showCopyAlert,\n        setShowCopyAlert,\n        checkLocalStorage,\n        isFavorite,\n        id,\n        checked,\n        setCountChecked,\n        setChecked,\n        countChecked,\n        setIsFavorite,\n        pathname,\n        history,\n      }}\n    />\n  );\n}\nProgressDrinkScreen.propTypes = {\n  match: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  history: PropTypes.string.isRequired,\n};\n\nexport default ProgressDrinkScreen;\n"]},"metadata":{},"sourceType":"module"}