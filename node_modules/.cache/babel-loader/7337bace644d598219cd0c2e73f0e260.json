{"ast":null,"code":"var _jsxFileName = \"/Users/fmartins/Trybe/fabemiliano.github.io/projetos/recipe-app/sd-03-recipes-app-04/src/components/ProgressFoodScreen.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getMealById } from '../services/foodApi';\nimport { mountRecipeList, getIfHasBeenFavorited } from './functionsProgressScreen';\nimport checkedlist from './checklist';\nimport MealsRenderRecipesInProgress from './helpersComponents/MealsRenderRecipesInProgress';\n\nfunction ProgressFoodScreen(props) {\n  const ingredientsDoneList = [];\n  const checkLocalStorage = JSON.parse(localStorage.getItem('inProgressRecipes'));\n  const {\n    match: {\n      params: {\n        id\n      }\n    }\n  } = props;\n  const {\n    location,\n    history\n  } = props;\n  const {\n    pathname\n  } = location;\n  const [inProgressRecipe, setInProgressRecipe] = useState([]);\n  const [showCopyAlert, setShowCopyAlert] = useState(false);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [countChecked, setCountChecked] = useState(0);\n  const [checked, setChecked] = useState(checkedlist);\n  useEffect(() => {\n    getMealById(id).then(data => {\n      setInProgressRecipe(data.meals[0]);\n    });\n\n    if (getIfHasBeenFavorited(id)) {\n      setIsFavorite(true);\n    }\n\n    if (checkLocalStorage === null || checkLocalStorage.meals === undefined) {\n      localStorage.setItem('inProgressRecipes', JSON.stringify({\n        meals: {\n          [id]: checked.checkbox\n        },\n        countChecked\n      }));\n    }\n\n    if (checkLocalStorage !== null) {\n      localStorage.removeItem('inProgressRecipes');\n      localStorage.setItem('inProgressRecipes', JSON.stringify({\n        meals: {\n          [id]: checked.checkbox\n        },\n        countChecked\n      }));\n    }\n  }, [id, checkLocalStorage, checked, countChecked]);\n  const data = mountRecipeList(inProgressRecipe, checked, ingredientsDoneList);\n  const buttonEnabled = countChecked === data.length;\n  return /*#__PURE__*/React.createElement(MealsRenderRecipesInProgress, {\n    values: {\n      data,\n      buttonEnabled,\n      inProgressRecipe,\n      showCopyAlert,\n      setShowCopyAlert,\n      checkLocalStorage,\n      isFavorite,\n      id,\n      checked,\n      setCountChecked,\n      setChecked,\n      countChecked,\n      setIsFavorite,\n      history,\n      pathname\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  });\n}\n\nProgressFoodScreen.propTypes = {\n  match: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  history: PropTypes.string.isRequired\n};\nexport default ProgressFoodScreen;","map":{"version":3,"sources":["/Users/fmartins/Trybe/fabemiliano.github.io/projetos/recipe-app/sd-03-recipes-app-04/src/components/ProgressFoodScreen.jsx"],"names":["React","useEffect","useState","PropTypes","getMealById","mountRecipeList","getIfHasBeenFavorited","checkedlist","MealsRenderRecipesInProgress","ProgressFoodScreen","props","ingredientsDoneList","checkLocalStorage","JSON","parse","localStorage","getItem","match","params","id","location","history","pathname","inProgressRecipe","setInProgressRecipe","showCopyAlert","setShowCopyAlert","isFavorite","setIsFavorite","countChecked","setCountChecked","checked","setChecked","then","data","meals","undefined","setItem","stringify","checkbox","removeItem","buttonEnabled","length","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getMealById } from '../services/foodApi';\nimport { mountRecipeList, getIfHasBeenFavorited } from './functionsProgressScreen';\nimport checkedlist from './checklist';\nimport MealsRenderRecipesInProgress from './helpersComponents/MealsRenderRecipesInProgress';\n\nfunction ProgressFoodScreen(props) {\n  const ingredientsDoneList = [];\n  const checkLocalStorage = JSON.parse(localStorage.getItem('inProgressRecipes'));\n\n  const { match: { params: { id } } } = props;\n  const { location, history } = props;\n  const { pathname } = location;\n\n  const [inProgressRecipe, setInProgressRecipe] = useState([]);\n  const [showCopyAlert, setShowCopyAlert] = useState(false);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [countChecked, setCountChecked] = useState(0);\n  const [checked, setChecked] = useState(checkedlist);\n\n  useEffect(() => {\n    getMealById(id)\n      .then((data) => { setInProgressRecipe(data.meals[0]); });\n    if (getIfHasBeenFavorited(id)) { setIsFavorite(true); }\n    if (checkLocalStorage === null || checkLocalStorage.meals === undefined) {\n      localStorage.setItem('inProgressRecipes', JSON.stringify({ meals: { [id]: checked.checkbox }, countChecked }));\n    }\n    if (checkLocalStorage !== null) {\n      localStorage.removeItem('inProgressRecipes');\n      localStorage.setItem('inProgressRecipes', JSON.stringify({ meals: { [id]: checked.checkbox }, countChecked }));\n    }\n  }, [id, checkLocalStorage, checked, countChecked]);\n\n  const data = mountRecipeList(inProgressRecipe, checked, ingredientsDoneList);\n  const buttonEnabled = countChecked === data.length;\n  return (\n    <MealsRenderRecipesInProgress\n      values={{\n        data,\n        buttonEnabled,\n        inProgressRecipe,\n        showCopyAlert,\n        setShowCopyAlert,\n        checkLocalStorage,\n        isFavorite,\n        id,\n        checked,\n        setCountChecked,\n        setChecked,\n        countChecked,\n        setIsFavorite,\n        history,\n        pathname,\n      }}\n    />\n  );\n}\nProgressFoodScreen.propTypes = {\n  match: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  history: PropTypes.string.isRequired,\n};\n\nexport default ProgressFoodScreen;\n"]},"metadata":{},"sourceType":"module"}