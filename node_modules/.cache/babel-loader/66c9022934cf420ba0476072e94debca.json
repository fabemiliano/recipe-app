{"ast":null,"code":"var _jsxFileName = \"/Users/fmartins/Trybe/fabemiliano.github.io/projetos/recipe-app/sd-03-recipes-app-04/src/components/ProgressFoodScreen.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getMealById } from '../services/foodApi';\nimport { mountRecipeList, getIfHasBeenFavorited } from './functionsProgressScreen';\nimport checkedlist, { checkedList } from './checklist';\nimport MealsRenderRecipesInProgress from './helpersComponents/MealsRenderRecipesInProgress';\n\nfunction ProgressFoodScreen(props) {\n  const ingredientsDoneList = [];\n  let checkLocalStorage = JSON.parse(localStorage.getItem('inProgressRecipes'));\n\n  if (checkLocalStorage === null) {\n    checkLocalStorage = {\n      cocktails: [],\n      meals: []\n    };\n  }\n\n  let arr;\n\n  if (checkLocalStorage.meals[id] === undefined) {\n    arr = checkedList.checkbox;\n    const newStorage = { ...checkLocalStorage,\n      meals: { ...checkLocalStorage.meals,\n        [id]: arr\n      }\n    };\n    localStorage.setItem('inProgressRecipes', JSON.stringify(newStorage));\n    checkLocalStorage = newStorage;\n  } else {\n    arr = checkLocalStorage.meals[id];\n    const newStorage = { ...checkLocalStorage,\n      meals: { ...checkLocalStorage.meals,\n        [id]: arr\n      }\n    };\n    localStorage.setItem('inProgressRecipes', JSON.stringify(newStorage));\n    checkLocalStorage = newStorage;\n  }\n\n  const {\n    match: {\n      params: {\n        id\n      }\n    }\n  } = props;\n  const {\n    location,\n    history\n  } = props;\n  const {\n    pathname\n  } = location;\n  const [inProgressRecipe, setInProgressRecipe] = useState([]);\n  const [showCopyAlert, setShowCopyAlert] = useState(false);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [countChecked, setCountChecked] = useState(0);\n  const [checked, setChecked] = useState(checkedlist);\n  useEffect(() => {\n    getMealById(id).then(data => {\n      setInProgressRecipe(data.meals[0]);\n    });\n\n    if (getIfHasBeenFavorited(id)) {\n      setIsFavorite(true);\n    }\n  }, [id, checkLocalStorage, checked, countChecked]);\n  const data = mountRecipeList(inProgressRecipe, checked, ingredientsDoneList);\n  const buttonEnabled = countChecked === data.length;\n  return /*#__PURE__*/React.createElement(MealsRenderRecipesInProgress, {\n    values: {\n      data,\n      buttonEnabled,\n      inProgressRecipe,\n      showCopyAlert,\n      setShowCopyAlert,\n      checkLocalStorage,\n      isFavorite,\n      id,\n      checked,\n      setCountChecked,\n      setChecked,\n      countChecked,\n      setIsFavorite,\n      history,\n      pathname\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  });\n}\n\nProgressFoodScreen.propTypes = {\n  match: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  history: PropTypes.string.isRequired\n};\nexport default ProgressFoodScreen;","map":{"version":3,"sources":["/Users/fmartins/Trybe/fabemiliano.github.io/projetos/recipe-app/sd-03-recipes-app-04/src/components/ProgressFoodScreen.jsx"],"names":["React","useEffect","useState","PropTypes","getMealById","mountRecipeList","getIfHasBeenFavorited","checkedlist","checkedList","MealsRenderRecipesInProgress","ProgressFoodScreen","props","ingredientsDoneList","checkLocalStorage","JSON","parse","localStorage","getItem","cocktails","meals","arr","id","undefined","checkbox","newStorage","setItem","stringify","match","params","location","history","pathname","inProgressRecipe","setInProgressRecipe","showCopyAlert","setShowCopyAlert","isFavorite","setIsFavorite","countChecked","setCountChecked","checked","setChecked","then","data","buttonEnabled","length","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,eAAT,EAA0BC,qBAA1B,QAAuD,2BAAvD;AACA,OAAOC,WAAP,IAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,4BAAP,MAAyC,kDAAzC;;AAEA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AACjC,QAAMC,mBAAmB,GAAG,EAA5B;AACA,MAAIC,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAX,CAAxB;;AACA,MAAIJ,iBAAiB,KAAK,IAA1B,EAAgC;AAC9BA,IAAAA,iBAAiB,GAAG;AAAEK,MAAAA,SAAS,EAAE,EAAb;AAAiBC,MAAAA,KAAK,EAAE;AAAxB,KAApB;AACD;;AAED,MAAIC,GAAJ;;AAEA,MAAIP,iBAAiB,CAACM,KAAlB,CAAwBE,EAAxB,MAAgCC,SAApC,EAA+C;AAC7CF,IAAAA,GAAG,GAAGZ,WAAW,CAACe,QAAlB;AACA,UAAMC,UAAU,GAAG,EAAE,GAAGX,iBAAL;AAAwBM,MAAAA,KAAK,EAAE,EAAE,GAAGN,iBAAiB,CAACM,KAAvB;AAA8B,SAACE,EAAD,GAAMD;AAApC;AAA/B,KAAnB;AACAJ,IAAAA,YAAY,CAACS,OAAb,CAAqB,mBAArB,EAA0CX,IAAI,CAACY,SAAL,CAAeF,UAAf,CAA1C;AACAX,IAAAA,iBAAiB,GAAGW,UAApB;AACD,GALD,MAKO;AACLJ,IAAAA,GAAG,GAAGP,iBAAiB,CAACM,KAAlB,CAAwBE,EAAxB,CAAN;AACA,UAAMG,UAAU,GAAG,EAAE,GAAGX,iBAAL;AAAwBM,MAAAA,KAAK,EAAE,EAAE,GAAGN,iBAAiB,CAACM,KAAvB;AAA8B,SAACE,EAAD,GAAMD;AAApC;AAA/B,KAAnB;AACAJ,IAAAA,YAAY,CAACS,OAAb,CAAqB,mBAArB,EAA0CX,IAAI,CAACY,SAAL,CAAeF,UAAf,CAA1C;AACAX,IAAAA,iBAAiB,GAAGW,UAApB;AACD;;AAED,QAAM;AAAEG,IAAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAEP,QAAAA;AAAF;AAAV;AAAT,MAAgCV,KAAtC;AACA,QAAM;AAAEkB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAwBnB,KAA9B;AACA,QAAM;AAAEoB,IAAAA;AAAF,MAAeF,QAArB;AAEA,QAAM,CAACG,gBAAD,EAAmBC,mBAAnB,IAA0C/B,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACgC,aAAD,EAAgBC,gBAAhB,IAAoCjC,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACkC,UAAD,EAAaC,aAAb,IAA8BnC,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACoC,YAAD,EAAeC,eAAf,IAAkCrC,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACsC,OAAD,EAAUC,UAAV,IAAwBvC,QAAQ,CAACK,WAAD,CAAtC;AAGAN,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,WAAW,CAACiB,EAAD,CAAX,CACGqB,IADH,CACSC,IAAD,IAAU;AAAEV,MAAAA,mBAAmB,CAACU,IAAI,CAACxB,KAAL,CAAW,CAAX,CAAD,CAAnB;AAAqC,KADzD;;AAEA,QAAIb,qBAAqB,CAACe,EAAD,CAAzB,EAA+B;AAAEgB,MAAAA,aAAa,CAAC,IAAD,CAAb;AAAsB;AACxD,GAJQ,EAIN,CAAChB,EAAD,EAAKR,iBAAL,EAAwB2B,OAAxB,EAAiCF,YAAjC,CAJM,CAAT;AAMA,QAAMK,IAAI,GAAGtC,eAAe,CAAC2B,gBAAD,EAAmBQ,OAAnB,EAA4B5B,mBAA5B,CAA5B;AACA,QAAMgC,aAAa,GAAGN,YAAY,KAAKK,IAAI,CAACE,MAA5C;AACA,sBACE,oBAAC,4BAAD;AACE,IAAA,MAAM,EAAE;AACNF,MAAAA,IADM;AAENC,MAAAA,aAFM;AAGNZ,MAAAA,gBAHM;AAINE,MAAAA,aAJM;AAKNC,MAAAA,gBALM;AAMNtB,MAAAA,iBANM;AAONuB,MAAAA,UAPM;AAQNf,MAAAA,EARM;AASNmB,MAAAA,OATM;AAUND,MAAAA,eAVM;AAWNE,MAAAA,UAXM;AAYNH,MAAAA,YAZM;AAaND,MAAAA,aAbM;AAcNP,MAAAA,OAdM;AAeNC,MAAAA;AAfM,KADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAqBD;;AACDrB,kBAAkB,CAACoC,SAAnB,GAA+B;AAC7BnB,EAAAA,KAAK,EAAExB,SAAS,CAAC4C,MAAV,CAAiBC,UADK;AAE7BnB,EAAAA,QAAQ,EAAE1B,SAAS,CAAC4C,MAAV,CAAiBC,UAFE;AAG7BlB,EAAAA,OAAO,EAAE3B,SAAS,CAAC4C,MAAV,CAAiBC;AAHG,CAA/B;AAMA,eAAetC,kBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getMealById } from '../services/foodApi';\nimport { mountRecipeList, getIfHasBeenFavorited } from './functionsProgressScreen';\nimport checkedlist, { checkedList } from './checklist';\nimport MealsRenderRecipesInProgress from './helpersComponents/MealsRenderRecipesInProgress';\n\nfunction ProgressFoodScreen(props) {\n  const ingredientsDoneList = [];\n  let checkLocalStorage = JSON.parse(localStorage.getItem('inProgressRecipes'));\n  if (checkLocalStorage === null) {\n    checkLocalStorage = { cocktails: [], meals: [] };\n  }\n\n  let arr;\n\n  if (checkLocalStorage.meals[id] === undefined) {\n    arr = checkedList.checkbox;\n    const newStorage = { ...checkLocalStorage, meals: { ...checkLocalStorage.meals, [id]: arr } };\n    localStorage.setItem('inProgressRecipes', JSON.stringify(newStorage));\n    checkLocalStorage = newStorage;\n  } else {\n    arr = checkLocalStorage.meals[id];\n    const newStorage = { ...checkLocalStorage, meals: { ...checkLocalStorage.meals, [id]: arr } };\n    localStorage.setItem('inProgressRecipes', JSON.stringify(newStorage));\n    checkLocalStorage = newStorage;\n  }\n\n  const { match: { params: { id } } } = props;\n  const { location, history } = props;\n  const { pathname } = location;\n\n  const [inProgressRecipe, setInProgressRecipe] = useState([]);\n  const [showCopyAlert, setShowCopyAlert] = useState(false);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [countChecked, setCountChecked] = useState(0);\n  const [checked, setChecked] = useState(checkedlist);\n\n  \n  useEffect(() => {\n    getMealById(id)\n      .then((data) => { setInProgressRecipe(data.meals[0]); });\n    if (getIfHasBeenFavorited(id)) { setIsFavorite(true); }\n  }, [id, checkLocalStorage, checked, countChecked]);\n\n  const data = mountRecipeList(inProgressRecipe, checked, ingredientsDoneList);\n  const buttonEnabled = countChecked === data.length;\n  return (\n    <MealsRenderRecipesInProgress\n      values={{\n        data,\n        buttonEnabled,\n        inProgressRecipe,\n        showCopyAlert,\n        setShowCopyAlert,\n        checkLocalStorage,\n        isFavorite,\n        id,\n        checked,\n        setCountChecked,\n        setChecked,\n        countChecked,\n        setIsFavorite,\n        history,\n        pathname,\n      }}\n    />\n  );\n}\nProgressFoodScreen.propTypes = {\n  match: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  history: PropTypes.string.isRequired,\n};\n\nexport default ProgressFoodScreen;\n"]},"metadata":{},"sourceType":"module"}