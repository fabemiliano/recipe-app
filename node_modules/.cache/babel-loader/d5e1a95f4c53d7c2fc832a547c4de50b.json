{"ast":null,"code":"var _jsxFileName = \"/Users/fmartins/Trybe/fabemiliano.github.io/projetos/recipe-app/sd-03-recipes-app-04/src/components/ProgressDrinkScreen.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getDrinkByID } from '../services/drink-api';\nimport { mountRecipeList, getIfHasBeenFavorited } from './functionsProgressScreen';\nimport checkedlist from './checklist';\nimport CockTailsRenderRecipesInProgress from './helpersComponents/CockTailsRenderRecipesInProgress';\n\nfunction ProgressDrinkScreen(props) {\n  const [inProgressDrink, setInProgressDrink] = useState([]);\n  const [showCopyAlert, setShowCopyAlert] = useState(false);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [countChecked, setCountChecked] = useState(0);\n  const ingredientsDoneList = [];\n  const {\n    match: {\n      params: {\n        id\n      }\n    }\n  } = props;\n  const [checked, setChecked] = useState(checkedlist);\n\n  if (checkLocalStorage === null) {\n    checkLocalStorage = {\n      meals: [],\n      cocktails: []\n    };\n  }\n\n  let arr;\n\n  if (checkLocalStorage.cocktails[id] === undefined) {\n    arr = checked.checkbox;\n    const newStorage = { ...checkLocalStorage,\n      cocktails: { ...checkLocalStorage.cocktails,\n        [id]: arr\n      }\n    };\n    localStorage.setItem('inProgressRecipes', JSON.stringify(newStorage));\n    checkLocalStorage = newStorage;\n  } else {\n    arr = checkLocalStorage.cocktails[id];\n    const newStorage = { ...checkLocalStorage,\n      cocktails: { ...checkLocalStorage.cocktails,\n        [id]: arr\n      }\n    };\n    localStorage.setItem('inProgressRecipes', JSON.stringify(newStorage));\n    checkLocalStorage = newStorage;\n  }\n\n  useEffect(() => {\n    getDrinkByID(id).then(data => {\n      setInProgressDrink(data.drinks[0]);\n    });\n\n    if (getIfHasBeenFavorited(id)) {\n      setIsFavorite(true);\n    }\n  }, [id, checkLocalStorage, checked, countChecked]);\n  const data = mountRecipeList(inProgressDrink, checked, ingredientsDoneList);\n  const buttonEnabled = countChecked === data.length;\n  const {\n    location,\n    history\n  } = props;\n  const {\n    pathname\n  } = location;\n  return /*#__PURE__*/React.createElement(CockTailsRenderRecipesInProgress, {\n    values: {\n      data,\n      buttonEnabled,\n      inProgressDrink,\n      showCopyAlert,\n      setShowCopyAlert,\n      checkLocalStorage,\n      isFavorite,\n      id,\n      checked,\n      setCountChecked,\n      setChecked,\n      countChecked,\n      setIsFavorite,\n      pathname,\n      history\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  });\n}\n\nProgressDrinkScreen.propTypes = {\n  match: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  history: PropTypes.string.isRequired\n};\nexport default ProgressDrinkScreen;","map":{"version":3,"sources":["/Users/fmartins/Trybe/fabemiliano.github.io/projetos/recipe-app/sd-03-recipes-app-04/src/components/ProgressDrinkScreen.jsx"],"names":["React","useEffect","useState","PropTypes","getDrinkByID","mountRecipeList","getIfHasBeenFavorited","checkedlist","CockTailsRenderRecipesInProgress","ProgressDrinkScreen","props","inProgressDrink","setInProgressDrink","showCopyAlert","setShowCopyAlert","isFavorite","setIsFavorite","countChecked","setCountChecked","ingredientsDoneList","match","params","id","checked","setChecked","checkLocalStorage","meals","cocktails","arr","undefined","checkbox","newStorage","localStorage","setItem","JSON","stringify","then","data","drinks","buttonEnabled","length","location","history","pathname","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,eAAT,EAA0BC,qBAA1B,QAAuD,2BAAvD;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,gCAAP,MAA6C,sDAA7C;;AAEA,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAClC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACW,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAMiB,mBAAmB,GAAG,EAA5B;AAEA,QAAM;AAAEC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AAAV;AAAT,MAAgCZ,KAAtC;AAEA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAACK,WAAD,CAAtC;;AAIA,MAAIkB,iBAAiB,KAAK,IAA1B,EAAgC;AAC9BA,IAAAA,iBAAiB,GAAG;AAAEC,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,SAAS,EAAE;AAAxB,KAApB;AACD;;AAED,MAAIC,GAAJ;;AAEA,MAAIH,iBAAiB,CAACE,SAAlB,CAA4BL,EAA5B,MAAoCO,SAAxC,EAAmD;AACjDD,IAAAA,GAAG,GAAGL,OAAO,CAACO,QAAd;AACA,UAAMC,UAAU,GAAG,EAAE,GAAGN,iBAAL;AAAwBE,MAAAA,SAAS,EAAE,EAAE,GAAGF,iBAAiB,CAACE,SAAvB;AAAkC,SAACL,EAAD,GAAMM;AAAxC;AAAnC,KAAnB;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,mBAArB,EAA0CC,IAAI,CAACC,SAAL,CAAeJ,UAAf,CAA1C;AACAN,IAAAA,iBAAiB,GAAGM,UAApB;AACD,GALD,MAKO;AACLH,IAAAA,GAAG,GAAGH,iBAAiB,CAACE,SAAlB,CAA4BL,EAA5B,CAAN;AACA,UAAMS,UAAU,GAAG,EAAE,GAAGN,iBAAL;AAAwBE,MAAAA,SAAS,EAAE,EAAE,GAAGF,iBAAiB,CAACE,SAAvB;AAAkC,SAACL,EAAD,GAAMM;AAAxC;AAAnC,KAAnB;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,mBAArB,EAA0CC,IAAI,CAACC,SAAL,CAAeJ,UAAf,CAA1C;AACAN,IAAAA,iBAAiB,GAAGM,UAApB;AACD;;AAED9B,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,YAAY,CAACkB,EAAD,CAAZ,CAAiBc,IAAjB,CAAuBC,IAAD,IAAU;AAC9BzB,MAAAA,kBAAkB,CAACyB,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAD,CAAlB;AACD,KAFD;;AAGA,QAAIhC,qBAAqB,CAACgB,EAAD,CAAzB,EAA+B;AAAEN,MAAAA,aAAa,CAAC,IAAD,CAAb;AAAsB;AACxD,GALQ,EAKN,CAACM,EAAD,EAAKG,iBAAL,EAAwBF,OAAxB,EAAiCN,YAAjC,CALM,CAAT;AAOA,QAAMoB,IAAI,GAAGhC,eAAe,CAACM,eAAD,EAAkBY,OAAlB,EAA2BJ,mBAA3B,CAA5B;AACA,QAAMoB,aAAa,GAAGtB,YAAY,KAAKoB,IAAI,CAACG,MAA5C;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAwBhC,KAA9B;AACA,QAAM;AAAEiC,IAAAA;AAAF,MAAeF,QAArB;AAEA,sBACE,oBAAC,gCAAD;AACE,IAAA,MAAM,EAAE;AACNJ,MAAAA,IADM;AAENE,MAAAA,aAFM;AAGN5B,MAAAA,eAHM;AAINE,MAAAA,aAJM;AAKNC,MAAAA,gBALM;AAMNW,MAAAA,iBANM;AAONV,MAAAA,UAPM;AAQNO,MAAAA,EARM;AASNC,MAAAA,OATM;AAUNL,MAAAA,eAVM;AAWNM,MAAAA,UAXM;AAYNP,MAAAA,YAZM;AAaND,MAAAA,aAbM;AAcN2B,MAAAA,QAdM;AAeND,MAAAA;AAfM,KADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAqBD;;AACDjC,mBAAmB,CAACmC,SAApB,GAAgC;AAC9BxB,EAAAA,KAAK,EAAEjB,SAAS,CAAC0C,MAAV,CAAiBC,UADM;AAE9BL,EAAAA,QAAQ,EAAEtC,SAAS,CAAC0C,MAAV,CAAiBC,UAFG;AAG9BJ,EAAAA,OAAO,EAAEvC,SAAS,CAAC0C,MAAV,CAAiBC;AAHI,CAAhC;AAMA,eAAerC,mBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getDrinkByID } from '../services/drink-api';\nimport { mountRecipeList, getIfHasBeenFavorited } from './functionsProgressScreen';\nimport checkedlist from './checklist';\nimport CockTailsRenderRecipesInProgress from './helpersComponents/CockTailsRenderRecipesInProgress';\n\nfunction ProgressDrinkScreen(props) {\n  const [inProgressDrink, setInProgressDrink] = useState([]);\n  const [showCopyAlert, setShowCopyAlert] = useState(false);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [countChecked, setCountChecked] = useState(0);\n  const ingredientsDoneList = [];\n\n  const { match: { params: { id } } } = props;\n\n  const [checked, setChecked] = useState(checkedlist);\n\n\n  \n  if (checkLocalStorage === null) {\n    checkLocalStorage = { meals: [], cocktails: [] };\n  }\n\n  let arr;\n\n  if (checkLocalStorage.cocktails[id] === undefined) {\n    arr = checked.checkbox;\n    const newStorage = { ...checkLocalStorage, cocktails: { ...checkLocalStorage.cocktails, [id]: arr } };\n    localStorage.setItem('inProgressRecipes', JSON.stringify(newStorage));\n    checkLocalStorage = newStorage;\n  } else {\n    arr = checkLocalStorage.cocktails[id];\n    const newStorage = { ...checkLocalStorage, cocktails: { ...checkLocalStorage.cocktails, [id]: arr } };\n    localStorage.setItem('inProgressRecipes', JSON.stringify(newStorage));\n    checkLocalStorage = newStorage;\n  }\n\n  useEffect(() => {\n    getDrinkByID(id).then((data) => {\n      setInProgressDrink(data.drinks[0]);\n    });\n    if (getIfHasBeenFavorited(id)) { setIsFavorite(true); }\n  }, [id, checkLocalStorage, checked, countChecked]);\n\n  const data = mountRecipeList(inProgressDrink, checked, ingredientsDoneList);\n  const buttonEnabled = countChecked === data.length;\n  const { location, history } = props;\n  const { pathname } = location;\n\n  return (\n    <CockTailsRenderRecipesInProgress\n      values={{\n        data,\n        buttonEnabled,\n        inProgressDrink,\n        showCopyAlert,\n        setShowCopyAlert,\n        checkLocalStorage,\n        isFavorite,\n        id,\n        checked,\n        setCountChecked,\n        setChecked,\n        countChecked,\n        setIsFavorite,\n        pathname,\n        history,\n      }}\n    />\n  );\n}\nProgressDrinkScreen.propTypes = {\n  match: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  history: PropTypes.string.isRequired,\n};\n\nexport default ProgressDrinkScreen;\n"]},"metadata":{},"sourceType":"module"}