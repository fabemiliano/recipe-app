"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalStorageMock = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = require("react");

var _StorageMock = require("./StorageMock");

var LocalStorageMock =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(LocalStorageMock, _Component);

  function LocalStorageMock(props) {
    var _this;

    (0, _classCallCheck2.default)(this, LocalStorageMock);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(LocalStorageMock).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "_storageOrig", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "_storageMock", void 0);
    var items = props.items;
    _this._storageOrig = global.localStorage;
    _this._storageMock = new _StorageMock.StorageMock(items);
    setLocalStorage(_this._storageMock);
    return _this;
  }

  (0, _createClass2.default)(LocalStorageMock, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Make sure we don't clear a mock from a newer instance (since React 16
      // B.constructor is called before A.componentWillUnmount)
      if (getLocalStorage() === this._storageMock) {
        setLocalStorage(this._storageOrig);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);
  return LocalStorageMock;
}(_react.Component);

exports.LocalStorageMock = LocalStorageMock;

function getLocalStorage() {
  return getGlobalObj().localStorage;
}

function setLocalStorage(value) {
  Object.defineProperty(getGlobalObj(), 'localStorage', {
    writable: true,
    value: value
  });
}

function getGlobalObj() {
  // eslint-disable-next-line no-undef
  return typeof window !== 'undefined' ? window : global;
}